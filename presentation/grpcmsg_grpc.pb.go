// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.4
// source: presentation/grpcmsg.proto

package grpcmsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcmsgClient is the client API for Grpcmsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcmsgClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type grpcmsgClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcmsgClient(cc grpc.ClientConnInterface) GrpcmsgClient {
	return &grpcmsgClient{cc}
}

func (c *grpcmsgClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/grpcmsg.Grpcmsg/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcmsgServer is the server API for Grpcmsg service.
// All implementations must embed UnimplementedGrpcmsgServer
// for forward compatibility
type GrpcmsgServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGrpcmsgServer()
}

// UnimplementedGrpcmsgServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcmsgServer struct {
}

func (UnimplementedGrpcmsgServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGrpcmsgServer) mustEmbedUnimplementedGrpcmsgServer() {}

// UnsafeGrpcmsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcmsgServer will
// result in compilation errors.
type UnsafeGrpcmsgServer interface {
	mustEmbedUnimplementedGrpcmsgServer()
}

func RegisterGrpcmsgServer(s grpc.ServiceRegistrar, srv GrpcmsgServer) {
	s.RegisterService(&Grpcmsg_ServiceDesc, srv)
}

func _Grpcmsg_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcmsgServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcmsg.Grpcmsg/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcmsgServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpcmsg_ServiceDesc is the grpc.ServiceDesc for Grpcmsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpcmsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcmsg.Grpcmsg",
	HandlerType: (*GrpcmsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Grpcmsg_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presentation/grpcmsg.proto",
}
